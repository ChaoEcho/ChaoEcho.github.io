<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言中二维数组与指针的关系</title>
      <link href="posts/c940.html"/>
      <url>posts/c940.html</url>
      
        <content type="html"><![CDATA[<h2 id="C语言中二维数组与指针的关系"><a href="#C语言中二维数组与指针的关系" class="headerlink" title="C语言中二维数组与指针的关系"></a>C语言中二维数组与指针的关系</h2><p> 1.行的关系</p><p> 因为数组是连续排列的，所以行的关系是很好确定的</p><p> 有一维数组推论知，若数组i [n] [m] ， 则 i[j] 就是一个指向 第j行的第一个元素的指针；</p><p> 可以简单的直接写成int *p = i[j] ，若想表示该行其他数，则可以直接对p进行加法操作</p><p> 2.列的关系</p><p> 由于是连续排列，所以列的关系并不是那么简单表示的，现在我们重新定义一个新的指针</p><p> int (*p)[m] ，该指针则表示p的长度是 int * m ；对p进行自增操作，则其一次跳过一行，</p><p> 对该指针的赋值则也有所不同 ， p=&amp;i[j] ；表示将第j行的所有元素的指针赋给p，满足它的</p><p> 定义长度，与i[j]有所不同，指针的长度不同，同时其运算要写为(*p)[k]，表示其所在行第k</p><p> 的元素</p><p> 暂且总结这么多，等以后熟练之后我再来</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用笔记</title>
      <link href="posts/8161.html"/>
      <url>posts/8161.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-知识点总结"><a href="#一-知识点总结" class="headerlink" title="一.知识点总结"></a>一.知识点总结</h2><ol><li><p>提交文件</p><p> <code>$ git add readme.txt</code>  </p><p> <code>$ git commit -m "wrote a readme file"</code></p></li><li><p>查看仓库状态</p><p> <code>$ git status</code></p></li><li><p>查看修改内容</p><p> <code>$ git diff readme.txt </code></p><blockquote><p> git diff比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff –cached 命令。</p><p> 请注意，git diff 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。 所以有时候你一下子暂存了所有更新过的文件后，运行 git diff 后却什么也没有，就是这个原因。</p></blockquote><p> <code>git diff HEAD -- readme.txt</code> 查看工作区和版本库里面最新版本的区别</p></li><li><p>显示从最近到最远的提交日志</p><p> <code>$ git log</code>  （显示全面）</p><p> <code>$ git log --pretty=oneline </code>  （只显示版本号）</p><p> <code>$ git reflog</code>  （查看命令历史）</p></li><li><p>回退版本</p><p> <code>$ git reset --hard HEAD^</code> （回退了一个版本）</p><p> <code>$ git reset --hard HEAD~100</code>  （回退了一百个版本）</p><p> <code>$ git reset --hard 1094a</code>  （指定版本回退）</p></li><li><p>丢弃工作区的修改</p><p> <code>$ git checkout -- readme.txt</code></p><p> <code>$ git restore readme.txt</code></p><blockquote><p> 一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p> 一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></blockquote><p> 丢弃暂存区的修改</p><p> <code>$ git reset HEAD readme.txt</code></p></li><li><p>删除版本库文件</p><p> <code>$ git rm test.txt</code></p><blockquote><p> 同时本机文件也被删除</p></blockquote></li><li><p>提交远程</p><p> <code>$ git push origin &lt;分支名&gt;</code></p><blockquote><p> 第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p></blockquote></li><li><p>抓取远程</p><p> <code>$ git pull</code></p></li><li><p> 分支使用</p></li><li><p> 查看分支：<code>git branch</code></p></li><li><p> 创建分支：<code>git branch &lt;name&gt;</code> </p></li><li><p> 切换分支：<code>git checkout &lt;name&gt; </code>或者<code>git switch &lt;name&gt; </code></p></li><li><p> 创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c  &lt;name&gt;</code></p></li><li><p>合并某分支到当前分支：<code>git merge &lt;name&gt; </code> （快速合并）</p><p> 禁用快速合并，并创建一个commit</p><p>  <code>$ git merge --no-ff -m "注释" dev</code></p></li><li><p>删除分支：<code>git branch -d &lt;name&gt; </code></p><p> 强制删除：<code>git branch -D &lt;name&gt; </code></p></li><li><p>查看分支合并情况</p><blockquote><p> 详细情况 <code>git log --graph</code></p><p> 版本号全显示 <code>git log --graph --pretty=oneline</code></p><p> 版本号简略显示 <code>git log --graph --pretty=oneline --abbrev-commit</code></p></blockquote></li><li><p>Bug分支</p><blockquote><p> 工作现场“储藏” <code>$ git stash</code></p><p> 查看工作储藏 <code>$ git stash list</code></p><p> 恢复后，stash内容并不删除 <code>$ git stash apply</code></p><p> 恢复的同时把stash内容删除 <code>$ git stash pop</code></p><p> 特定恢复 <code>$ git stash apply &lt;name&gt;</code> </p><p> 复制一个特定的提交到当前分支 <code>$ git cherry-pick &lt;版本号&gt;</code></p></blockquote></li><li><p>多人协作</p><blockquote><p> 查看远程库的信息  <code>$ git remote</code></p><p> 查看远程库的详细信息  <code>$ git remote</code></p><p> 在本地创建和远程分支对应的分支</p><p>  <code>git checkout -b branch-name origin/branch-name</code></p><p> 建立本地分支和远程分支的关联</p><p> <code>git branch --set-upstream branch-name origin/branch-name</code></p></blockquote></li><li><p>Rebase</p><blockquote><p> 历史记录变为直线型 <code>$ git rebase</code>  </p><p> 停止转变 <code>$ git rebase --quit</code></p></blockquote></li><li><p>标签管理</p><blockquote><p> 创建标签 <code>$ git tag v1.0</code></p><p> 创建具体标签 <code>$ git tag v0.9 &lt;版本号&gt;</code></p><p> 查看标签 <code>$ git tag</code></p><p> 查看标签信息 <code>git show &lt;tagname&gt;</code></p><p> 创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：</p><p> <code>$ git tag -a v0.1 -m "version 0.1 released" 1094adb</code></p><p> 删除标签 <code>$ git tag -d v0.1</code></p><p> 推送标签 <code>git push origin &lt;tagname&gt;</code></p><p> 一次性推送全部尚未推送到远程的本地标签 <code>$ git push origin --tags</code></p><p> 删除远程标签，先删除本地，再删除远端</p><p> <code>$ git push origin :refs/tags/v0.9</code></p></blockquote></li></ol><h2 id="二-异常解决"><a href="#二-异常解决" class="headerlink" title="二.异常解决"></a>二.异常解决</h2><ol><li><p> 出现 END 不要慌张 ，按 Q 键 即可</p></li><li><p> Github查看仓库地址，点击下载按钮的拓展即可</p></li><li><p>删除文件 </p><p> <code>$ rm test.txt</code></p><p> 新建文件夹</p><p> <code>$ mkdir &lt;files&gt;</code></p></li><li><p>查看文件</p><p> <code>$ cat test.txt</code></p><p> 查看文件夹下文件列表</p><p> <code>$ ls</code></p><p> 创建文件</p><p> <code>$ touch &lt;文件名&gt;</code></p></li><li><p>定位文件</p><ol><li><p> 先定位磁盘 <code>cd C:</code> (有：)</p></li><li><p> 在定位文件夹 <code>cd Echochao</code> (无：)</p></li></ol></li></ol><h2 id="三-别名备份"><a href="#三-别名备份" class="headerlink" title="三.别名备份"></a>三.别名备份</h2><ol><li><p>定义别名    <code>$ git config --global alias.st status</code></p></li><li><p>撤销别名</p><ol><li><p><code>git status</code>  —&gt; <code>git st</code></p></li><li><p><code>git commit</code> —&gt; <code>git ci</code></p></li><li><p><code>git chekout</code> —&gt; <code>git co</code></p></li><li><p><code>git branch</code>  —&gt; <code>git br</code></p></li><li><p><code>git log --graph --pretty=oneline --abbrev-commit</code>     —&gt;    <code>git lg</code></p></li></ol></li></ol><h2 id="四-PDF常见命令总结"><a href="#四-PDF常见命令总结" class="headerlink" title="四.PDF常见命令总结"></a>四.<a href="https://github.com/ChaoEcho/Echo-Store">PDF常见命令总结</a></h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="参考链接：廖老师，yyds"><a href="#参考链接：廖老师，yyds" class="headerlink" title="参考链接：廖老师，yyds"></a>参考链接：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖老师，yyds</a></h2>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="posts/f929.html"/>
      <url>posts/f929.html</url>
      
        <content type="html"><![CDATA[<h1 id="这难道不是很有意义的一天嘛"><a href="#这难道不是很有意义的一天嘛" class="headerlink" title="这难道不是很有意义的一天嘛"></a>这难道不是很有意义的一天嘛</h1><p>​        总算搭建成功了，早就想搞一个了，一直眼馋别人的</p><hr><p>​        嘿嘿，让我也来分享一下自己搭建的过程以及踩过的坑。在网上也找了很多文字教程，也重做了很多次，但最终成功了，哈哈哈</p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?t=1007">视频操作，永远比文本更要清楚</a> （但是UP主省略了GitHub的部分）</p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖老师，yyds</a> （补充了Git部分的操作）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
